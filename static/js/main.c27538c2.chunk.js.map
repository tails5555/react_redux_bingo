{"version":3,"sources":["actions/game_action.js","reducers/game_reducer.js","reducers/index.js","stores/root_store.js","components/cell/Cell.js","components/player/Player.js","components/complete/Complete.js","views/BingoView.js","containers/BingoContainer.js","App.js","serviceWorker.js","index.js"],"names":["shuffle_array","array","Array","from","length","v","k","rand","Math","floor","random","_ref","point_update_by_obj","player","r","c","score","horizontal","vertical","left_cross","right_cross","point_update_by_number","num","idx","board","indexOf","INITIAL_STATE","call_queue","status","turn","player1","apply","map","Number","prototype","valueOf","player2","combineReducers","game","state","arguments","undefined","action","type","Object","objectSpread","payload","store","createStore","rootReducer","compose","applyMiddleware","ReduxThunk","window","__REDUX_DEVTOOLS_EXTENSION__","f","button_color","Cell","push_action","number","react_default","a","createElement","react","className","concat","includes","onClick","Player","numbers","id","part","tmp","push","slice","render_square","row","key","components_cell_Cell","Complete","complete","join","cross","find_index_by_number","arr","col","BingoView","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handle_click_initialize","game_initialize","setState","p1_completed","p2_completed","_handle_click_cell","_this$props","player_pushes_cell_success","player_pushes_cell_failure","alert","_score_manage","_horizon_vertical_check","player_completed","_find_index_by_number","p_horizon","p_vertical","_cross_check","_find_index_by_number2","p_cross","_score_output","_this$props2","game_done","_this$state","p1_score","p2_score","location","href","_this$props3","_this$state2","components_player_Player","components_complete_Complete","turn_message","PureComponent","connect","dispatch","p1","p2","App","es","RootStore","BingoContainer","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c27538c2.chunk.js","sourcesContent":["// 첫 플레이 시, 빙고판을 무작위로 배치합니다.\r\nconst shuffle_array = () => {\r\n    let array = Array.from({ length: 25 }, (v, k) => k + 1); \r\n    for (let k = array.length - 1; k > 0; k--) {\r\n        const rand = Math.floor(Math.random() * (k + 1));\r\n        [array[k], array[rand]] = [array[rand], array[k]];\r\n    }\r\n    return array;\r\n}\r\n\r\n// 게임을 시작 혹은 재시작할 때 값을 초기화하는 액션입니다.\r\n\r\nexport const GAME_INITIALIZE = 'GAME_INITIALIZE';\r\n\r\nexport const game_initialize = () => {\r\n    return {\r\n        type: GAME_INITIALIZE,\r\n        payload: {\r\n            status : 'PLAYING',\r\n            player1 : {\r\n                board: shuffle_array(),\r\n                score: {\r\n                    vertical: [0, 0, 0, 0, 0],\r\n                    horizontal: [0, 0, 0, 0, 0],\r\n                    left_cross: 0,\r\n                    right_cross: 0\r\n                }\r\n            },\r\n            player2 : {\r\n                board: shuffle_array(),\r\n                score: {\r\n                    vertical: [0, 0, 0, 0, 0],\r\n                    horizontal: [0, 0, 0, 0, 0],\r\n                    left_cross: 0,\r\n                    right_cross: 0\r\n                }\r\n            },\r\n            call_queue : []\r\n        }\r\n    };\r\n}\r\n\r\n// 게임이 끝난 경우 상태를 반환하기 위한 액션입니다.\r\n\r\nexport const GAME_DONE = 'GAME_DONE';\r\n\r\nexport const game_done = () => {\r\n    return {\r\n        type: GAME_DONE\r\n    }\r\n}\r\n// row, col 별 카운팅 획수를 추가하는 함수입니다.\r\n\r\nconst point_update_by_obj = (player, r, c) => {\r\n    player.score.horizontal[r] += 1;\r\n    player.score.vertical[c] += 1;\r\n    \r\n    if(r === c) {\r\n        player.score.left_cross += 1;\r\n    }\r\n    if(4 - r === c){\r\n        player.score.right_cross += 1;\r\n    }\r\n\r\n    return player;\r\n}\r\n\r\n// 숫자로 row, col 를 가공하여 카운팅 횟수를 추가하는 함수입니다.\r\n\r\nconst point_update_by_number = (player, num) => {\r\n    const idx = player.board.indexOf(num);\r\n\r\n    const r = Math.floor(idx / 5);\r\n    const c = idx % 5;\r\n\r\n    return point_update_by_obj(player, r, c);\r\n}\r\n\r\n// 플레이어가 블록 누르기를 성공하면 실행하는 액션입니다.\r\n\r\nexport const PLAYER_PUSHES_CELL_SUCCESS = 'PLAYER_PUSHES_CELL_SUCCESS';\r\n\r\nexport const player_pushes_cell_success = (turn, player1, player2, call_queue, r, c, num) => {\r\n    let p1, p2;\r\n    if(turn === 'PLAYER1') {\r\n        p1 = point_update_by_obj(player1, r, c);\r\n        p2 = point_update_by_number(player2, num);\r\n    } else {\r\n        p2 = point_update_by_obj(player2, r, c);\r\n        p1 = point_update_by_number(player1, num);\r\n    }\r\n\r\n    call_queue.push(num);\r\n    \r\n    return {\r\n        type: PLAYER_PUSHES_CELL_SUCCESS,\r\n        payload: {\r\n            player1 : p1, player2 : p2, call_queue, turn : turn === 'PLAYER1' ? 'PLAYER2' : 'PLAYER1'\r\n        }\r\n    };\r\n}\r\n\r\n// 플레이어가 블록을 클릭하다가 문제 생기면 진행하는 액션입니다.\r\n\r\nexport const PLAYER_PUSHES_CELL_FAILURE = 'PLAYER_PUSHES_CELL_FAILURE';\r\n\r\nexport const player_pushes_cell_failure = () => {\r\n    return {\r\n        type: PLAYER_PUSHES_CELL_FAILURE\r\n    }\r\n}","import { GAME_INITIALIZE, GAME_DONE, PLAYER_PUSHES_CELL_SUCCESS, PLAYER_PUSHES_CELL_FAILURE } from 'actions/game_action';\r\n\r\n// store 에 사용할 값을 초기화 합니다.\r\nconst INITIAL_STATE = {\r\n    call_queue: [],\r\n    status: 'READY',\r\n    turn: 'PLAYER1',\r\n    player1: {\r\n        board: Array.apply(null, new Array(25)).map(Number.prototype.valueOf, 0),\r\n        score: {\r\n            vertical: [0, 0, 0, 0, 0],\r\n            horizontal: [0, 0, 0, 0, 0],\r\n            left_cross: 0,\r\n            right_cross: 0\r\n        }\r\n    },\r\n    player2: {\r\n        board: Array.apply(null, new Array(25)).map(Number.prototype.valueOf, 0),\r\n        score: {\r\n            vertical: [0, 0, 0, 0, 0],\r\n            horizontal: [0, 0, 0, 0, 0],\r\n            left_cross: 0,\r\n            right_cross: 0\r\n        }\r\n    }\r\n}\r\n\r\n// Action 타입에 따라 Store 에 저장할 값을 반환합니다.\r\nexport default function(state = INITIAL_STATE, action) {\r\n    switch(action.type){\r\n        case GAME_INITIALIZE :\r\n            return { \r\n                ...state, \r\n                status: action.payload.status, \r\n                player1: action.payload.player1,\r\n                player2: action.payload.player2,\r\n                turn: 'PLAYER1',\r\n                call_queue: action.payload.call_queue,\r\n            };\r\n        \r\n        case PLAYER_PUSHES_CELL_SUCCESS :\r\n            return { \r\n                ...state, \r\n                player1: action.payload.player1,\r\n                player2: action.payload.player2,\r\n                turn: action.payload.turn,\r\n                call_queue: action.payload.call_queue,\r\n            };\r\n\r\n        case GAME_DONE :\r\n            return { ...state, status: 'ENDING' };\r\n\r\n        case PLAYER_PUSHES_CELL_FAILURE :\r\n            return { ...state };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport gameReducer from './game_reducer';\r\n\r\nexport default combineReducers({\r\n    game : gameReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nimport rootReducer from 'reducers';\r\n\r\nconst store = createStore(rootReducer, compose(applyMiddleware(ReduxThunk), window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f));\r\n\r\nexport default store;","import React, { Fragment } from 'react';\r\n\r\nimport './Cell.css';\r\n\r\n// 플레이어의 색상을 구분합니다. 1플레이어는 파란색, 2플레이어는 검정색입니다.\r\nconst button_color = (player) => player === 'PLAYER1' ? 'primary' : 'secondary';\r\n\r\n// 빙고에 보이는 블록을 함수형 컴포넌트로 작성했습니다.\r\nconst Cell = ({ push_action, number, player, call_queue }) => (\r\n    <Fragment>\r\n        <button \r\n            className={ `cell__margin ${ call_queue.includes(number) ? `btn btn-${ button_color(player) }` : `btn btn-outline-${ button_color(player) }` }` } \r\n            onClick={ push_action }\r\n        >\r\n            { number === 0 ? 'X' : number }\r\n        </button>\r\n    </Fragment>\r\n);\r\n\r\nexport default Cell;","import React, { Fragment } from 'react';\r\n\r\nimport './Player.css';\r\n\r\nimport { Cell } from 'components/cell';\r\n\r\n// 25 개의 일차원 배열을 5 * 5 이차원 배열로 바꾸는 함수입니다.\r\nconst render_square = (numbers, part) => {\r\n    const tmp = [];\r\n    for(let k = 0; k < numbers.length; k += part) {\r\n        tmp.push(numbers.slice(k, k + part));\r\n    }\r\n    return tmp;\r\n}\r\n\r\n// 각 플레이어들에게 빙고 판을 보여줄 함수형 컴포넌트입니다.\r\nconst Player = ({ numbers, player, score, push_action, call_queue }) => (\r\n    <Fragment>\r\n        <div className=\"player__container\">\r\n            <div id={`bingo__board_${player}`}>    \r\n            {\r\n                render_square(numbers, 5)\r\n                    .map((row, r) => (\r\n                        <div \r\n                            key={`bingo_${player}_row_${r}`}\r\n                            className=\"player__bingo_row\"\r\n                        >\r\n                        {\r\n                            row.map((num, c) => (\r\n                                <Cell \r\n                                    key={`bingo_${player}_col_${c}`}\r\n                                    player={ player }\r\n                                    number={ num }\r\n                                    push_action={ () => push_action(player, r, c, num) }\r\n                                    call_queue={ call_queue }\r\n                                />\r\n                            ))\r\n                        }\r\n                        </div>\r\n                    ))\r\n            }\r\n            </div>\r\n            <div id={`bingo__score_${player}`} className=\"text-center\">\r\n                <h1>{ player }</h1>\r\n                <h2>{ score }</h2>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default Player;","import React, { Fragment } from 'react';\r\n\r\nimport './Complete.css';\r\n\r\n// 가로선, 세로선, 대각선 별로 완료된 현황을 차례대로 출력했습니다.\r\n// 선 별로 완료된 순서를 구현하는 방법이 떠오르지 않아 각 선 별 순서로 대체했습니다.\r\nconst Complete = ({ complete }) => (\r\n    <Fragment>\r\n        <ul className=\"list-group complete__container\">\r\n            <li className=\"list-group-item disabled\">\r\n                가로선 : { complete.horizontal.length === 0 ? '아직 없음' : complete.horizontal.join(', ') + ' 번째' }\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                세로선 : { complete.vertical.length === 0 ? '아직 없음' : complete.vertical.join(', ') + ' 번째' }\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n                대각선 : { complete.cross.length === 0 ? '아직 없음' : complete.cross.join(', ') }\r\n            </li>\r\n        </ul>\r\n    </Fragment>\r\n);\r\n\r\nexport default Complete;","import React, { Fragment, PureComponent } from 'react';\r\n\r\nimport { Player } from 'components/player';\r\nimport { Complete } from 'components/complete';\r\n\r\n// 게임의 차례를 알려주는 메시지 함수입니다.\r\nconst turn_message = (status, turn) => {\r\n    switch(status){\r\n        case 'READY' :\r\n            return '게임을 시작하세요.';\r\n        case 'PLAYING' :\r\n            return `${turn} 차례 입니다.`;\r\n        default :\r\n            return '게임이 종료 되었습니다.';\r\n    }\r\n}\r\n\r\n// 숫자로 row, col 인덱스를 반환하는 함수입니다.\r\nconst find_index_by_number = (arr, num) => {\r\n    const idx = arr.indexOf(num);\r\n    const row = Math.floor(idx / 5);\r\n    const col = idx % 5;\r\n    return {\r\n        row, col \r\n    };\r\n}\r\n\r\n// BingoContainer 를 기반으로 작동하는 View 컴포넌트입니다.\r\nclass BingoView extends PureComponent {\r\n    constructor(props){\r\n        super(props);\r\n        // completed 요소는 가로선, 세로선, 대각선 별 각 순서대로 완료된 번호를 저장하기 위한 객체입니다.\r\n        // 이는 게임을 하면서 변동 횟수가 많기 때문에 Redux 보다 state 를 사용했습니다.\r\n        this.state = { \r\n            p1_completed: {\r\n                vertical: [],\r\n                horizontal: [],\r\n                cross: [],\r\n            },\r\n            p2_completed: {\r\n                vertical: [],\r\n                horizontal: [],\r\n                cross: [],\r\n            }\r\n        };\r\n    }\r\n\r\n    // 게임 시작 및 재시작을 위한 이벤트 함수 입니다.\r\n    _handle_click_initialize = () => {\r\n        const { game_initialize } = this.props;\r\n        game_initialize();\r\n        this.setState({\r\n            p1_completed: {\r\n                vertical: [],\r\n                horizontal: [],\r\n                cross: [],\r\n            },\r\n            p2_completed: {\r\n                vertical: [],\r\n                horizontal: [],\r\n                cross: [],\r\n            }\r\n        });\r\n    }\r\n\r\n    // 빙고에 있는 블록을 클릭하면 점수를 책정하는 함수입니다.\r\n    _handle_click_cell = (player, row, col, num) => {\r\n        const { status } = this.props;\r\n        \r\n        if(status === 'READY') {\r\n            alert('게임 시작 버튼을 클릭하고 시도 바랍니다.');\r\n            return;\r\n        } \r\n\r\n        if(status === 'ENDING') {\r\n            alert('게임이 이미 끝났습니다. 다시 시도 바랍니다.');\r\n            return;\r\n        } \r\n\r\n        const { turn, player1, player2, call_queue, player_pushes_cell_success, player_pushes_cell_failure } = this.props;\r\n        if(turn !== player) {\r\n            player_pushes_cell_failure();\r\n            alert(`지금 차례는 ${ turn } 입니다!`);\r\n        } else if(call_queue.includes(num)) {\r\n            player_pushes_cell_failure();\r\n            alert(`${ num } 블록은 이미 선택되었습니다. 다른 숫자를 클릭하세요.`);\r\n        } else {\r\n            player_pushes_cell_success(turn, player1, player2, call_queue, row, col, num);\r\n            this._score_manage(num);\r\n        }\r\n    }\r\n\r\n    // 가로선과 세로선을 완성한 경우 완성 목록에 반영하기 위한 함수입니다.\r\n    _horizon_vertical_check = (player_completed, player, type, num) => {\r\n        const { board } = player;\r\n        const { row, col } = find_index_by_number(board, num);\r\n\r\n        switch(type){\r\n            case 'HORIZONTAL' :\r\n                const p_horizon = player_completed.horizontal.slice();\r\n                if(player.score.horizontal[row] === 5) {\r\n                    if(!p_horizon.includes(row + 1)){\r\n                        p_horizon.push(row + 1);\r\n                    }\r\n                }\r\n                return p_horizon;\r\n           \r\n            case 'VERTICAL' :\r\n                const p_vertical = player_completed.vertical.slice();\r\n                if(player.score.vertical[col] === 5) {\r\n                    if(!p_vertical.includes(col + 1)){\r\n                        p_vertical.push(col + 1);\r\n                    }\r\n                }\r\n                return p_vertical;\r\n\r\n            default :\r\n                return [];\r\n        }\r\n    }\r\n\r\n    // 대각선을 완성한 경우 완성 목록에 반영하기 위한 함수입니다.\r\n    _cross_check = (player_completed, player, num) => {\r\n        const { cross } = player_completed;\r\n        const { board } = player;\r\n        const { row, col } = find_index_by_number(board, num);\r\n        const p_cross = cross.slice();\r\n\r\n        if(row === col){\r\n            if(player.score.left_cross === 5){\r\n                if(!p_cross.includes('LEFT'))\r\n                    p_cross.push('LEFT');\r\n            }\r\n        }\r\n\r\n        if(4 - row === col){\r\n            if(player.score.right_cross === 5){\r\n                if(!p_cross.includes('RIGHT'))\r\n                    p_cross.push('RIGHT');\r\n            }\r\n        }\r\n\r\n        return p_cross;\r\n    }\r\n    \r\n    // state 에 있는 값을 토대로 완성된 선의 개수를 반환합니다.\r\n    _score_output = (player_completed) => {\r\n        return player_completed.vertical.length + player_completed.horizontal.length + player_completed.cross.length;\r\n    }\r\n\r\n    // 버튼 클릭 후 플레이어의 점수를 비교하는 함수입니다.\r\n    _score_manage = (num) => {\r\n        const { player1, player2, game_done } = this.props;\r\n        let { p1_completed, p2_completed } = this.state;\r\n\r\n        p1_completed = { \r\n            ...p1_completed, \r\n            horizontal : this._horizon_vertical_check(p1_completed, player1, 'HORIZONTAL', num),\r\n            vertical: this._horizon_vertical_check(p1_completed, player1, 'VERTICAL', num),\r\n            cross: this._cross_check(p1_completed, player1, num)\r\n        };\r\n        \r\n        p2_completed = { \r\n            ...p2_completed, \r\n            horizontal : this._horizon_vertical_check(p2_completed, player2, 'HORIZONTAL', num),\r\n            vertical: this._horizon_vertical_check(p2_completed, player2, 'VERTICAL', num),\r\n            cross: this._cross_check(p2_completed, player2, num)\r\n        };\r\n        \r\n        let p1_score = this._score_output(p1_completed);\r\n        let p2_score = this._score_output(p2_completed);\r\n        \r\n        // 둘 다 5개 이상이면 무승부로 게임 종료. 한 쪽이 5점 이상이면 이에 맞게 반환합니다.\r\n        if(p1_score >= 5 || p2_score >= 5){\r\n            if(p1_score >= 5 && p2_score >= 5) {\r\n                alert('모두 5줄 이상 만들어 비겼습니다.');\r\n            } else if(p1_score >= 5) {\r\n                alert('PLAYER 1 가 우승했습니다.');\r\n            } else {\r\n                alert('PLAYER 2 가 우승했습니다.');\r\n            }\r\n\r\n            game_done();\r\n            window.location.href = '/';\r\n        } \r\n\r\n        this.setState({\r\n            p1_completed, p2_completed\r\n        });\r\n    }\r\n\r\n    // 렌더링 함수.\r\n    render(){\r\n        const { turn, player1, player2, status, call_queue } = this.props;\r\n        const { p1_completed, p2_completed } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div id=\"main__view\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <Player\r\n                                push_action={ this._handle_click_cell }\r\n                                numbers={ player1.board } \r\n                                player={ \"PLAYER1\" }\r\n                                score={ this._score_output(p1_completed) }\r\n                                call_queue={ call_queue }\r\n                            />\r\n                            <Complete complete={ p1_completed } />\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <Player\r\n                                push_action={ this._handle_click_cell }\r\n                                numbers={ player2.board } \r\n                                player={ \"PLAYER2\" }\r\n                                score={ this._score_output(p2_completed) }\r\n                                call_queue={ call_queue }\r\n                            />\r\n                            <Complete complete={ p2_completed } />\r\n                        </div>\r\n                    </div>\r\n                    <hr/>\r\n                    <div id=\"button__view\" className=\"text-center\">\r\n                        <h2>{ turn_message(status, turn) }</h2>\r\n                        <button className=\"btn btn-info\" onClick={ this._handle_click_initialize }>\r\n                            { status === 'READY' ? '게임 시작' : '게임 재시작' }\r\n                        </button>\r\n                    </div> \r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BingoView;","import { BingoView } from 'views';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { game_initialize, game_done, player_pushes_cell_success, player_pushes_cell_failure } from 'actions/game_action';\r\n\r\n// Redux 행위를 사용할 컨테이너를 생성합니다.\r\nconst mapStateToProps = ({ game }) => ({\r\n    call_queue: game.call_queue,\r\n    status: game.status,\r\n    player1: game.player1,\r\n    player2: game.player2,\r\n    turn: game.turn,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    game_initialize: () => dispatch(game_initialize()),\r\n    game_done: () => dispatch(game_done()),\r\n    player_pushes_cell_success: (turn, player1, player2, call_queue, r, c, num) => dispatch(player_pushes_cell_success(turn, player1, player2, call_queue, r, c, num)),\r\n    player_pushes_cell_failure: () => dispatch(player_pushes_cell_failure()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BingoView);","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { RootStore } from 'stores';\n\nimport { BingoContainer } from 'containers';\n\nconst App = () => (\n    <Provider store={ RootStore }>\n      <BingoContainer />\n    </Provider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}